<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xmlns:context="http://www.springframework.org/schema/context"
        xmlns:aop="http://www.springframework.org/schema/aop"
        xmlns:tx="http://www.springframework.org/schema/tx"
        xmlns:mvc="http://www.springframework.org/schema/mvc"
        xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context-2.5.xsd
        http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
        http://www.springframework.org/schema/tx
        http://www.springframework.org/schema/tx/spring-tx.xsd
        http://www.springframework.org/schema/mvc
        http://www.springframework.org/schema/mvc/spring-mvc.xsd
        ">

    <!--自动扫描包-->
    <context:component-scan base-package="com.iotek"/>
    <!--开启切面-->
    <aop:aspectj-autoproxy/>
    <!--开启事务注解配置-->
    <tx:annotation-driven></tx:annotation-driven>
    <!--开启Spring mvc的注解模式-->
    <mvc:annotation-driven></mvc:annotation-driven>

    <!--第一种：引入外部文件-->
    <bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <!--&lt;!&ndash;引入单个文件&ndash;&gt;
        <property name="location" value="classpath:oracle.properties"></property>-->
        <!--引入多个文件-->
        <property name="locations">
            <list>
                <value>classpath:oracle.properties</value>
                <value>classpath:log4j.properties</value>
            </list>
        </property>
    </bean>
    <!--第二种-->
    <!--<context:property-placeholder location="classpath:oracle.properties"></context:property-placeholder>
    &lt;!&ndash;将外部文件配置成bean&ndash;&gt;-->

    <!--配置数据库连接池-->
    <bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
        <property name="driverClassName" value="${jdbc.driver}"></property>
        <property name="url" value="${jdbc.url}"></property>
        <property name="username" value="${jdbc.username}"></property>
        <property name="password" value="${jdbc.password}"></property>
    </bean>

    <!--配置数据库会话bean-->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <!--配置mybatis数据库连接池-->
        <property name="dataSource" ref="dataSource"></property>
        <!--自动将指定包下的类名转换成类的别名-->
        <property name="typeAliasesPackage" value="com.iotek.po"></property>
         <!--自动会扫描指定包下的映射文件-->
        <property name="mapperLocations" value="classpath:mapper/*.xml"></property>
        <!--加载mybatis 里面的配置-->
        <property name="configLocation" value="classpath:mybatis-config.xml"></property>
    </bean>

    <!--将dao层的接口和映射文件进行匹配-->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.iotek.dao"></property>
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"></property>
    </bean>

    <!--定义事务管理器-->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"></property>
    </bean>

   <!--事物通知的配置-->
    <tx:advice id="txAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            <tx:method name="add*"/>
            <tx:method name="update*"/>
            <tx:method name="delete*"/>
        </tx:attributes>
    </tx:advice>
    <aop:config>
        <!--横切关注点-->
        <aop:pointcut id="interceptorPointCuts" expression="execution(
        * com.iotek.service.imp.*.*(..))"></aop:pointcut>
        <!--通知-->
        <aop:advisor advice-ref="txAdvice" pointcut-ref="interceptorPointCuts"></aop:advisor>
    </aop:config>

    <!-- 配置视图解析器 如何把handler 方法返回值解析为实际的物理视图 -->
    <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <property name="prefix" value="/WEB-INF/views/"></property>
        <property name="suffix" value=".jsp"></property>
    </bean>
    <!--mapping 为使用时的web映射，location表示此种文件在工程中的目录-->
    <mvc:resources mapping="/images/**" location="/images/"/>
    <mvc:resources mapping="/js/**" location="/js/"/>
    <mvc:resources mapping="/css/**" location="/css/"/>
    <mvc:resources mapping="/page/**" location="/page/"/>
    <mvc:resources mapping="/fonts/**" location="/fonts/"/>

    <!--用于上传文件-->
    <bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver"/>

   <!-- 配置拦截器-->
    <mvc:interceptors>
        <mvc:interceptor>
            <!--拦截当前路劲下所有请求-->
            <mvc:mapping path="/customer/exitProgram.do"/>
           <!-- &lt;!&ndash;要排除的拦截请求&ndash;&gt;
            <mvc:exclude-mapping path="/customer/login.do"/>
            <mvc:exclude-mapping path="/customer/register.view"/>
            <mvc:exclude-mapping path="/customer/register.do"/>
            <mvc:exclude-mapping path="/customer/checkInfo.do"/>-->
            <!--设置的拦截器-->
            <bean class="com.iotek.intercept.CustomerIntercept"></bean>
        </mvc:interceptor>
    </mvc:interceptors>
</beans>